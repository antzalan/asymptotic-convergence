function [W] = precoder_CDZF_HIER(He_M, Mn, mu, P, pow_control)
% precoder_CDZF_HIER: 
% Function that computes the proposed CD-ZF precoding matrix for the hierarchical topology case. 
%
% In this algorithm, there is no quantization of values (intented to allow the precise-CSIT
% TXs to "guess" the CSIT at the other TXs), since they already have access to 
% such CSIT. Then, the TXs with more accurate CSIT try to compensate and correct 
% the interference generated by the CSIT noise. 
%
% INPUTS:  He_M: Channel matrix estimates at each TX
%            Mn: Num. antennas at each TX
%            mu: back-off power factor. 0 < mu <= 1, allows to adapt to possible power
%                outages in case of instantaneous power constraints. (see paper)
%             P: Power (or SNR) or the setting 
%   pow_control: Different power normalizations available. 
%                Choices are:
%
%                   - 'per_Antenna': Instantaneous power norm. per antenna 
%                   - 'per_TX': Instantaneous power norm. per TX 
%                   - 'average_perTX': Average power norm. per antenna      
%                   - 'average_perAntenna': Average power norm. per TX 
%
%
% OUTPUT: Vector of size Num.TX-antennas x Num.RXs 
%

    K    = size(He_M, 1);  % Number of RXs
    Mt   = size(He_M, 2);  % Total number of transmit antennas
    M    = size(He_M, 3);  % Number of TXs
    
    W = zeros(Mt,K);       % Initializing Precoding matrix 
      
    %% Precoder at dumb TXs
    n_ant_prev = Mn(1);

    if strcmp(pow_control, 'per_Antenna')  || strcmp(pow_control, 'per_TX')
       % nothing to do here
    elseif strcmp(pow_control, 'average_perTX') || strcmp(pow_control, 'average_perAntenna')
        mu = sqrt(2./(2+sqrt(P.^(-0.6)))); % back-off power factor chosen to be proportional to alpha_2
    else 
        error('Unknown power control')
    end        
               
    for m = 2:M  % At TX m
        He_m = He_M(:,:,m); % Global channel estimate at TX m
        W_m = precoder_CENTRALIZED(He_m, Mn, P, pow_control); % Naive centralized precoder
       
        % Building effective precoder       
        vec_ant_TX_m = n_ant_prev + 1 : n_ant_prev + Mn(m); % current antennas
        n_ant_prev   = n_ant_prev + Mn(m);  % Updating vector of antennas
                
        W(vec_ant_TX_m,:) = mu*W_m(vec_ant_TX_m,:); % Coef. used by TX m       
    end
    
    %% Precoder at smart TXs (now TX 1)
    He  = squeeze(He_M(:,:,1)); % Global channel estimate at TX 1
    V_1 = precoder_CENTRALIZED(He, Mn, P,pow_control); % Centralized precoder if everyone shared TX 1's estimate
    
    % Assuming perfect estimate of other TXs' CSIT
    W_atTX1 = W;
        
    % Reducing error 
    W1_preNorm  = zeros(Mn(1),K); % Init precoder at TX 1  
    v_ant_noTX1 = Mn(1)+1:Mt;     % index of antennas for TXs 2 ... M
    v_ant_TX1   = 1:Mn(1);        % Index of antennas for TX 1

    for i = 1:K   % For each user            
        H_i_bar         = He([1:i-1,i+1:end],:);   % Channel matrix for all the RXs except RX i
        h_i_bar_TX1     = H_i_bar(:, v_ant_TX1);   % Coefs of TXs except TX 1
        h_i_bar_not_TX1 = H_i_bar(:, v_ant_noTX1); % Coefs of TX 1

        h_inv = h_i_bar_TX1'/(h_i_bar_TX1*h_i_bar_TX1'+ 1/sqrt(K*P)*eye(K-1))*h_i_bar_not_TX1; 

        v_i = V_1(:,i); % Centralized precoder for RX i
        diff_vw = mu*v_i(v_ant_noTX1) - W_atTX1(v_ant_noTX1,i); % Diff between naive decentralized and centalized ideal precoder 

        W1_preNorm(:,i) = mu*v_i(v_ant_TX1) + h_inv*diff_vw;    % Precoder at TX 1  
    end  
        
        
    %% Precoder normalization per TX 
    if strcmp(pow_control, 'per_Antenna')
        norm_perAntenna = sqrt(sum(abs(W1_preNorm).^2,2));
        normalization = max([norm_perAntenna;1]);
        W1 = W1_preNorm/normalization;     
        
    elseif strcmp(pow_control, 'per_TX')
        norm_perTX = norm(W1_preNorm);
        W1  = W1_preNorm/max([norm_perTX; 1]);  

    elseif strcmp(pow_control, 'average_perTX')
        W1 = W1_preNorm;
        
    elseif strcmp(pow_control, 'average_perAntenna')
        W1 = W1_preNorm;
        
    else 
        error('Unknown power control')
    end
    
    %%% Updating final effective precoder
    W(1:Mn(1),:) = W1;    
    
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Author: Antonio Bazco-Nogueras  
% Date: 2022/05/11
% Contact: antonio.bazco@imdea.org
% License: This file can be distributed, remixed, adapted, and other work can be
% built upon it, as long as appropiate credit is included for the original creation. 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

